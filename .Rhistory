Oq20 <- q20[ ,"Ozone"]
Oq20
max(Oq20)
bad <- is.na(Oq20)
Oq20[!bad]
max(Oq20)
summary(Oq20)
Max(Oq20)
mean(Oq20)
mean(Oq20[!bad])
max(Oq20[!bad])
data
df
load("C:\\Users\\Nisha\\Documents\\Coursera\\rprog-data-quiz1_data\\.RData")
df
nrows(df)
nrow
nrow(df)
q12 <- subset[1:2, ]
q12 <- df[1:2, ]
q12
q14 <- df[151:153, ]
q14
q15 <-df[47, ]
q15
q16 <- df[ ,Ozone]
q16 <- df[ ,"Ozone"]
q16
bad <- is.na(df[ ,"Ozone"]
bad <- is.na(df[ ,"Ozone"])
bad <- is.na(df[ ,"Ozone"])
bad
count(df[ ,"Ozone"]=False)
count(df[ ,"Ozone"])
q17 <- [!bad]
[!bad]
q17 <- df[ ,"Ozone"]
mean(q17)
bad <-is.na(q17)
bad
q17[!bad]
mean(q17)
summary(q17)
df <- read.csv ("hw1_data.csv")
df
x <- df[x$Month==6, ]
x <- df[$Month==6, ]
Data <- data.frame(x =c(1,2,3,4), y =c("a", "b", "c", "d"))
example <- subset(Data, x<2)
example
Data
df
try <- subset(df, Ozone<10)
try
data
df
try1 <- subset(df, Ozone>31)
try1
try1 <- subset(df, Ozone > 31 & Temp > 90)
try1
Summary(try1)
mean(try1)
mean(Solar.R)
mean("Solar.R")
SR <- try1[ ,"Solar.R"]
SR
mean(SR)
q19 <- subset (df, Month == 6)
q19
T <- q19[ ,Temp]
T <- q19[ ,"Temp"]
T
mean(T)
q20 <subset(df, Month ==5)
q20 <-subset(df, Month ==5)
q20
Oq20 <- q20[ ,"Ozone"]
Oq20
max(Oq20)
bad <- is.na(Oq20)
Oq20[!bad]
max(Oq20)
summary(Oq20)
Max(Oq20)
mean(Oq20)
mean(Oq20[!bad])
max(Oq20[!bad])
q18 <- subset(df, Ozone>31 & Temp >90)
q18
mean ("Solar.R")
summary(q18)
q19 <-df[ ,Month ==6]
q19 < subset(df, Month ==6)
q19 <- subset(df, Month ==6)
q19
Summary (q19)
summary(q19)
q20 <- subset(df, Month == 5)
q20
summary(q20)
q()
dataset_url<- "https://class.coursera.org/rprog-005/assignment/view?assignment_id=3"
download.file (dataset_url, "specdata.zip")
unzip("specdata.zip", exdir = "specdata")
unzip("specdata.zip")
download.file (dataset_url, "specdata.zip")
x<- c(10.4, 5.6, 3.1, 6.4, 21.7)
s5>-rep(x, times=5)
s<- rep(x, times=5)
s
s1<- rep(x, each=5)
s1
getwd()
setwd("ProgrammingAssignment2")
getwd()
dir<- list.files(path="C:/Users/Nisha/Documents/ProgrammingAssignment")
dir<- list.files(path="C:/Users/Nisha/Documents/ProgrammingAssignment2")
dir
nrow
nrow("cachematrix.R")
makeCacheMatrix <- function(x = matrix()) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix
makeCacheMatrix
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
solve(x)
solve(X)
Guess <- function(max) {
secret.number <- sample(1:max, 1)
total.guesses <- 1
finished <- FALSE
message(sprintf("I'm thinking of a number from 1 to %d.", max))
self.list <- list(
get.info = function() {
message(
sprintf(
"You %s guessed the number!",
if (finished) "have already"
else "still haven't"
)
)
message(sprintf("Guess number: %d", total.guesses))
message(sprintf("The number is taken from 1 to %d.", max))
},
get.clues = function(guess) {
if (finished) message("You've already guessed my number!")
else {
if (guess == secret.number) {
message("Congratulations!")
message(sprintf("You got it in %d guesses!", total.guesses))
finished <<- TRUE
} else {
if (secret.number < guess) message("Too high!")
else message("Too low!")
total.guesses <<- total.guesses + 1
}
}
}
)
}
game <- Guess(100)
class(game)
game$get.info()
game$get.info(40)
game$get.clues(50)
game$get.clues(40)
game$get.clues(25)
game$get.clues(12)
game$get.clues(30)
game$get.clues(35)
game$get.clues(39)
game$get.clues(38)
game$get.clues(37)
game$get.clues(32)
matrix(1:10, 2,5)
makeCacheMatrix <- function(x = matrix(1:10, 2, 5)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m
solve(x)
solve(X)
makeCacheMatrix <- function(x = matrix(1:10, 2, 5)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
getmean
makeCacheMatrix <- function(x = matrix(1:10, 2, 5)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
return(x)
}
x
makeCacheMatrix <- function(x = matrix(1:10, 2, 5)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
return(m)
}
m
matrix(3:6, 2, 2)
makeCacheMatrix <- function(x = matrix(3:6, 2, 2)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
return(m)
}
m
x
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
summary(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix(3:6, 2, 2)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
summary(cachemean)
makeCacheMatrix <- function(x = matrix(3:6, 2, 2)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
summary(makeCacheMatrix)
matrix(3:6, 2, 2)
mat<-matrix(3:6, 2, 2)
mat
makeCacheMatrix <- function(x = mat) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mean(cachemean)
summary(makeCacheMatrix)
mean(makeCacheMatrix)
makeCacheMatrix <- function(x = numeric()) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
numeric(1:10)
c(1:10)
num  <- c(1:10)
cachemean(num)
makeCacheMatrix <- function(x = matrix(c(1,5,6,19) 2,2))) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean$getmean
cachemean(makeCacheMatrix)
num
cachemean(num)
num$getmean
num$getmean()
num$get()
makeCacheMatrix$getmean()
a <- makeVector(c(1,2,3,4))
a <- c(1,2,3,4)
a
a$get
a$getmean
a <- c(1,2,3,4)
a
a$get()
a$getmean()
makeCacheMatrix <- function(x = matrix(c(1,5,6,19) 2,2))) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix(c(1,5,6,19) 2,2)) {
m <-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function()m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix(c(1,5,6,19) 2,2)) {
makeCacheMatrix <- function(x = matrix(c(1,5,6,19) 2,2)) {
makeCacheMatrix <- function(x = matrix(5:8 2,2)) {
makeCacheMatrix <- function(x = numeric(c(1,2,3,4)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
